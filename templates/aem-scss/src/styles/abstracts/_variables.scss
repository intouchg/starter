$xxsmall: 320px;
$xsmall: 375px;
$small: 600px;
$medium: 768px;
$large: 992px;
$xlarge: 1224px;

// Treatment Support Custom Breakpoints
$se-breakpoints: (
	none: null,
	sm: 601px,
	md: 768px,
	lg: 992px,
	xl: 1224px,
	nav-desktop: 895px,
);

// Treatment Support spacing
$mw-sizes: (
	12: 100%,
	11: 11 / 12 * 100%,
	10: 10 / 12 * 100%,
	9: 9 / 12 * 100%,
	8: 8 / 12 * 100%,
	7: 7 / 12 * 100%,
	6: 6 / 12 * 100%,
	5: 5 / 12 * 100%,
	4: 4 / 12 * 100%,
	3: 3 / 12 * 100%,
	2: 2 / 12 * 100%,
);
$all-mw: 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;

// Is above content needed?
// This seems to be used for a simulated 12-column grid.
// I inherited this but never used it. Would also be removed from /base/_utilities.scss

$spc0: 0;
$spc1: 4px;
$spc2: 8px;
$spc3: 12px;
$spc4: 16px;
$spc5: 24px;
$spc6: 32px;
$spc7: 48px;
$spc8: 64px;
$spc9: 96px;
$spc10: 128px;
$spc11: 256px;
$spacing: (
	0: $spc0,
	1: $spc1,
	2: $spc2,
	3: $spc3,
	4: $spc4,
	5: $spc5,
	6: $spc6,
	7: $spc7,
	8: $spc8,
	9: $spc9,
	10: $spc10,
	11: $spc11,
);
$colors: (
	'plum': #95004d,
	'bronze': #9b7a69,
	'text': #333,
	'factcard': #e1d7d2,
	'white': #fff,
	'light-gray': #f7f7f7,
	'medium-gray': #dfdfdf,
	'gray': #d1d3d4,
	'dark-gray': #58595b,
	'dark-blue': #001d49,
);
$plum: map.get($colors, 'plum');
$bronze: map.get($colors, 'bronze');
$text: map.get($colors, 'text');
$factcard: map.get($colors, 'factcard');
$white: map.get($colors, 'white');
$light-gray: map.get($colors, 'light-gray');
$medium-gray: map.get($colors, 'medium-gray');
$gray: map.get($colors, 'gray');
$dark-gray: map.get($colors, 'dark-gray');
$dark-blue: map.get($colors, 'dark-blue');

/*
	! Concern:
	The existence of standalone variables and arrays for mapping utility classes
	could easily branch into different variable expressions in code.

	Arrays are used for mapping in /base/_utility.scss,	which makes them important
	and would make more sense to have them scoped in the same file. The concern there is that
	adding a standalone variable could happen without the colors array being updated.
	This would cause confusion if someone tried to use a utility class yaddayaddayadda.
*/
